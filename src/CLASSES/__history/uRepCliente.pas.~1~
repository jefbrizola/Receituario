unit uRepCliente;

interface

uses
  uCliente, uEndereco, uTelefone, SysUtils, DBXpress, dbclient;

type
  TRepCliente = class

  public
    constructor create;
    destructor destroy; override;
    function ConsultaCliente(Id : integer): TCliente; overload;
    function ConsultaCliente(nome : string): TClientDataSet; overload;
    procedure SalvarCliente(Cliente:TCliente);
    procedure AtualizarCliente(Cliente:TCliente);
    procedure ExcluirCliente(Cliente:TCliente);
    procedure AtualizarEndereco(Endereco:TEndereco);
    function ConsultarEndereco(ClienteId : integer): TListaEndereco;
    procedure SalvarEndereco(Endereco:TEndereco; ClienteId : integer);
    function ConsultarTelefone(ClienteId : Integer): TListaTelefone;
    procedure AtualizarTelefone(Telefone : TTelefone);
    procedure SalvarTelefone(Telefone:TTelefone; ClienteId : integer);
  end;

implementation

uses SqlExpr, DB, uDMCon;

function TRepCliente.ConsultaCliente(Id : integer): TCliente;
var
  sql : TSQLDataSet;
begin
  try
    Sql := TSQLDataSet.Create(nil);
    DM := TDM.Create(nil);
    sql.SQLConnection := DM.conexao;
    with sql do
    begin
      Close;
      CommandText := 'select * from cliente where id = :ClienteId';
      ParamByName('ClienteId').AsInteger := Id;
      Open;
      First;
      while not eof do
      begin
        Result := TCliente.Create;
        Result.ID := FieldByName('ID').AsInteger;
        Result.Nome := FieldByName('Nome').AsString;
        Result.Documento := FieldByName('Documento').AsString;
        Result.DataCadastro := FieldByName('DataCadastro').AsDateTime;
        Result.Enderecos := ConsultarEndereco(Result.id);
        Result.Telefones := ConsultarTelefone(Result.ID);
        Next;
      end;
    end;
  finally
    sql.Free;
  end;
end;

procedure TRepCliente.SalvarCliente(Cliente:TCliente);
var
  sql : TSQLDataSet;
  I: Integer;
  trans  : TTransactionDesc;
begin
  try
    try
      //Atribui uma identificação para transação

      trans.TransactionID := 1;
      trans.IsolationLevel :=  xilREADCOMMITTED;

      //Inicia a transação
      DM := TDM.Create(nil);
      DM.conexao.StartTransaction(trans);
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with sql do
      begin
        Close;
        CommandText := 'insert into CLIENTE (Id, DataCadastro, Nome, Documento) '+
                        ' values (:Id, :Data, :Nome, :Documento)';
        ParamByName('Id').AsInteger := Cliente.ID;
        ParamByName('Data').AsDate := Cliente.DataCadastro;
        ParamByName('Nome').AsString := Cliente.Nome;
        ParamByName('Documento').AsString := Cliente.Documento;
        ExecSQL;
      end;
      for I := 0 to Cliente.Enderecos.Contar - 1 do
        SalvarEndereco(TEndereco(Cliente.Enderecos.getItem(I)),Cliente.ID);
      for I := 0 to Cliente.Telefones.Contar - 1 do
        SalvarTelefone(TTelefone(Cliente.Telefones.getItem(I)),Cliente.ID);
      //Transação com sucesso!
      DM.conexao.Commit(trans);

    except on E: Exception do
      begin
        DM.conexao.Rollback(trans);
        raise E.Create('Ocorreu um erro no Salvar Clientes!');
      end;
    end;
  finally
    sql.Free;
  end;
end;

procedure TRepCliente.AtualizarCliente(Cliente:TCliente);
var
  sql : TSQLDataSet;
  I: Integer;
  trans  : TTransactionDesc;
begin
  try
    try
      //Atribui uma identificação para transação
      trans.TransactionID := 1;
      trans.IsolationLevel :=  xilREADCOMMITTED;
      //Inicia a transação
      DM.conexao.StartTransaction(trans);
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'update cliente set DataCadastro= :Data, '+
                       'Nome= :Nome, Documento= :Documento where '+
                       'Id= :Id';
        ParamByName('Data').AsDateTime := Cliente.DataCadastro;
        ParamByName('Nome').AsString := Cliente.Nome;
        ParamByName('Documento').AsString := Cliente.Documento;
        ParamByName('Id').AsInteger := Cliente.ID;
        ExecSQL;
      end;
      for I := 0 to Cliente.Enderecos.Contar - 1 do
        AtualizarEndereco(TEndereco(Cliente.Enderecos.getItem(I)));
      for I := 0 to Cliente.Telefones.Contar - 1 do
        AtualizarTelefone(TTelefone(Cliente.Telefones.getItem(I)));
      //Transação com sucesso!
      DM.conexao.Commit(trans);

    except on E: Exception do
      begin
        DM.conexao.Rollback(trans);
        raise E.Create('Ocorreu um erro no Atualizar Clientes!');
      end;
    end;
  finally
    sql.Free;
  end;
end;

procedure TRepCliente.ExcluirCliente(Cliente:TCliente);
var
  sql : TSQLDataSet;
  I: Integer;
  trans  : TTransactionDesc;
begin
  try
    try
      //Atribui uma identificação para transação
      trans.TransactionID := 1;
      trans.IsolationLevel :=  xilREADCOMMITTED;
      //Inicia a transação
      DM.conexao.StartTransaction(trans);
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'delete from cliente where Id= :Id';
        ParamByName('Id').AsInteger := Cliente.ID;
        ExecSQL;
      end;
      //Transação com sucesso!
      DM.conexao.Commit(trans);

    except on E: Exception do
      begin
        DM.conexao.Rollback(trans);
        raise E.Create('Ocorreu um erro no Excluir Clientes!');
      end;
    end;
  finally
    sql.Free;
  end;
end;

procedure TRepCliente.AtualizarEndereco(Endereco:TEndereco);
var
  sql : TSQLDataSet;
  I: Integer;
begin
  try
    try
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'update endereco set logradouro= :logr, bairro= :bairro, '+
                       'cidade= :cidade, estado= :estado, cep = :cep where '+
                       'Id= :Id';
        ParamByName('logr').AsString := Endereco.Logradouro;
        ParamByName('bairro').AsString := Endereco.Bairro;
        ParamByName('cidade').AsString := Endereco.Cidade;
        ParamByName('estado').AsString := Endereco.Estado;
        ParamByName('cep').AsString := Endereco.Cep;
        ParamByName('Id').AsInteger := Endereco.ID;
        ExecSQL;
      end;

    except on E: Exception do
      begin
        raise E.Create('Ocorreu um erro no Atualizar Endereço');
      end;
    end;
  finally
    sql.Free;
  end;
end;

function TRepCliente.ConsultaCliente(nome: string): TClientDataSet; //Marreta
var
  sql : TSQLDataSet;
  cliente : TCliente;
begin
  try
    DM := TDM.Create(nil);
    Sql := TSQLDataSet.Create(nil);
    sql.SQLConnection := DM.conexao;

    Result := TClientDataSet.Create(nil);
    Result.FieldDefs.Clear;
    Result.FieldDefs.Add('Id',ftInteger);
    Result.FieldDefs.Add('Nome',ftstring,60);
    Result.FieldDefs.Add('Documento',ftstring,18);
    Result.FieldDefs.Add('DataCadastro',ftDate);
    Result.CreateDataSet;    
    with sql do
    begin
      Close;
      CommandText := 'select * from cliente where nome like :nome';
      ParamByName('nome').AsString := nome + '%';
      Open;
      First;
      while not eof do
      begin
        Result.Append;
        Result.FieldByName('ID').AsInteger := FieldByName('ID').AsInteger;
        Result.FieldByName('Nome').AsString := FieldByName('Nome').AsString;
        Result.FieldByName('Documento').AsString := FieldByName('Documento').AsString;
        Result.FieldByName('DataCadastro').AsDateTime := FieldByName('DataCadastro').AsDateTime;
        Result.Post;
        Next;
      end;
    end;
  finally
    sql.Free;
  end;

end;

function TRepCliente.ConsultarEndereco(ClienteId : integer): TListaEndereco;
var
  sql : TSQLDataSet;
  endereco : TEndereco;
begin
  try
    Sql := TSQLDataSet.Create(nil);
    sql.SQLConnection := DM.conexao;
    with sql do
    begin
      Close;
      CommandText := 'select * from endereco where ClienteId = :ClienteId';
      ParamByName('ClienteId').AsInteger := ClienteId;
      Open;
      First;
      Result := TListaEndereco.Create;
      while not eof do
      begin
        endereco := TEndereco.Create;
        endereco.Id := FieldByName('ID').AsInteger;
        Endereco.Logradouro := FieldByName('Logradouro').AsString;
        Endereco.Bairro := FieldByName('Bairro').AsString;
        Endereco.Cidade := FieldByName('Cidade').AsString;
        Endereco.Estado := FieldByName('Estado').AsString;
        Endereco.Cep := FieldByName('Cep').AsString;
        Result.Adicionar(endereco);
        Next;
      end;
    end;
  finally
    sql.Free;
  end;
end;

procedure TRepCliente.SalvarEndereco(Endereco:TEndereco; ClienteId : integer);
var
  sql : TSQLDataSet;
  I: Integer;
begin
  try
    try
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'insert into endereco(ClienteId, logradouro, bairro, '+
                       'cidade, estado, cep) values (:ClienteId, :logr, :bairro, '+
                       ':cidade, :estado, :cep)';
        ParamByName('ClienteId').AsInteger := ClienteId;
        ParamByName('logr').AsString := Endereco.Logradouro;
        ParamByName('bairro').AsString := Endereco.Bairro;
        ParamByName('cidade').AsString := Endereco.Cidade;
        ParamByName('estado').AsString := Endereco.Estado;
        ParamByName('cep').AsString := Endereco.Cep;
        ExecSQL;
      end;

    except on E: Exception do
      begin
        raise E.Create('Ocorreu um erro no Atualizar Endereço');
      end;
    end;
  finally
    sql.Free;
  end;
end;

function TRepCliente.ConsultarTelefone(ClienteId : Integer): TListaTelefone;
var
  sql : TSQLDataSet;
  telefone : TTelefone;
begin
  try
    Sql := TSQLDataSet.Create(nil);
    sql.SQLConnection := DM.conexao;
    with sql do
    begin
      Close;
      CommandText := 'select * from telefone where ClienteId = :ClienteId';
      ParamByName('ClienteId').AsInteger := ClienteId;
      Open;
      First;
      Result := TListaTelefone.Create;
      while not eof do
      begin
        telefone := TTelefone.Create;
        telefone.Id := FieldByName('Id').AsInteger;
        telefone.Numero := FieldByName('Numero').AsString;
        telefone.Tipo := FieldByName('Tipo').AsString;
        Result.Adicionar(telefone);
        Next;
      end;
    end;
  finally
    sql.Free;
  end;
end;

constructor TRepCliente.create;
begin

end;

destructor TRepCliente.destroy;
begin

  inherited;
end;

procedure TRepCliente.AtualizarTelefone(Telefone : TTelefone);
var
  sql : TSQLDataSet;
  I: Integer;
begin
  try
    try
      //Atribui uma identificação para transação
      //Inicia a transação
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'update telefone set numero= :num, tipo= :tipo '+
                       'where Id= :Id';
        ParamByName('num').AsString := Telefone.Numero;
        ParamByName('tipo').AsString := Telefone.Tipo;
        ParamByName('Id').AsInteger := Telefone.ID;
        ExecSQL;
      end;
      //Transação com sucesso!

    except on E: Exception do
      begin
        raise E.Create('Ocorreu um erro no Atualizar Telefone');
      end;
    end;
  finally
    sql.Free;
  end;end;


procedure TRepCliente.SalvarTelefone(Telefone:TTelefone; ClienteId : integer);
var
  sql : TSQLDataSet;
  I: Integer;
begin
  try
    try
      //Atribui uma identificação para transação
      Sql := TSQLDataSet.Create(nil);
      sql.SQLConnection := DM.conexao;
      with Sql do
      begin
        Close;
        CommandText := 'insert into telefone(ClienteId, numero, tipo '+
                       ') values (:ClienteId, :numero, :tipo )';

        ParamByName('ClienteId').AsInteger := ClienteId;
        ParamByName('numero').AsString := Telefone.Numero;
        ParamByName('tipo').AsString := Telefone.Tipo;
        ExecSQL;
      end;

    except on E: Exception do
      begin
        raise E.Create('Ocorreu um erro no Inserir Telefone');
      end;
    end;
  finally
    sql.Free;
  end;end;

end.
